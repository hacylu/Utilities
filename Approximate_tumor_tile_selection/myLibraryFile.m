function [methodinfo,structs,enuminfo,ThunkLibName]=myLibraryFile
%MYLIBRARYFILE Create structures to define interfaces found in 'openslide-wrapper'.

%This function was generated by loadlibrary.m parser version  on Mon Oct  7 16:09:59 2019
%perl options:'openslide-wrapper.i -outfile=myLibraryFile.m -thunkfile=libopenslide0x2D0_thunk_pcwin64.c -header=openslide-wrapper.h openslide.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libopenslide0x2D0_thunk_pcwin64');
% const char * openslide_detect_vendor ( const char * filename ); 
fcns.thunkname{fcnNum}='cstringcstringThunk';fcns.name{fcnNum}='openslide_detect_vendor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% openslide_t * openslide_open ( const char * filename ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='openslide_open'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_openslidePtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32_t openslide_get_level_count ( openslide_t * osr ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='openslide_get_level_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_openslidePtr'};fcnNum=fcnNum+1;
% void openslide_get_level0_dimensions ( openslide_t * osr , int64_t * w , int64_t * h ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='openslide_get_level0_dimensions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_openslidePtr', 'int64Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
% void openslide_get_level_dimensions ( openslide_t * osr , int32_t level , int64_t * w , int64_t * h ); 
fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='openslide_get_level_dimensions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_openslidePtr', 'int32', 'int64Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
% double openslide_get_level_downsample ( openslide_t * osr , int32_t level ); 
fcns.thunkname{fcnNum}='doublevoidPtrint32Thunk';fcns.name{fcnNum}='openslide_get_level_downsample'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'s_openslidePtr', 'int32'};fcnNum=fcnNum+1;
% int32_t openslide_get_best_level_for_downsample ( openslide_t * osr , double downsample ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='openslide_get_best_level_for_downsample'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_openslidePtr', 'double'};fcnNum=fcnNum+1;
% void openslide_read_region ( openslide_t * osr , uint32_t * dest , int64_t x , int64_t y , int32_t level , int64_t w , int64_t h ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint64int64int32int64int64Thunk';fcns.name{fcnNum}='openslide_read_region'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_openslidePtr', 'uint32Ptr', 'int64', 'int64', 'int32', 'int64', 'int64'};fcnNum=fcnNum+1;
% void openslide_close ( openslide_t * osr ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='openslide_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_openslidePtr'};fcnNum=fcnNum+1;
% const char * openslide_get_error ( openslide_t * osr ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='openslide_get_error'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'s_openslidePtr'};fcnNum=fcnNum+1;
% const char * const * openslide_get_property_names ( openslide_t * osr ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='openslide_get_property_names'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='stringPtrPtr'; fcns.RHS{fcnNum}={'s_openslidePtr'};fcnNum=fcnNum+1;
% const char * openslide_get_property_value ( openslide_t * osr , const char * name ); 
fcns.thunkname{fcnNum}='cstringvoidPtrcstringThunk';fcns.name{fcnNum}='openslide_get_property_value'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'s_openslidePtr', 'cstring'};fcnNum=fcnNum+1;
% const char * const * openslide_get_associated_image_names ( openslide_t * osr ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='openslide_get_associated_image_names'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='stringPtrPtr'; fcns.RHS{fcnNum}={'s_openslidePtr'};fcnNum=fcnNum+1;
% void openslide_get_associated_image_dimensions ( openslide_t * osr , const char * name , int64_t * w , int64_t * h ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='openslide_get_associated_image_dimensions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_openslidePtr', 'cstring', 'int64Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
% void openslide_read_associated_image ( openslide_t * osr , const char * name , uint32_t * dest ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='openslide_read_associated_image'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_openslidePtr', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% const char * openslide_get_version ( void ); 
fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='openslide_get_version'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% _Bool openslide_can_open ( const char * filename ); 
fcns.thunkname{fcnNum}='_BoolcstringThunk';fcns.name{fcnNum}='openslide_can_open'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='bool'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32_t openslide_get_layer_count ( openslide_t * osr ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='openslide_get_layer_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_openslidePtr'};fcnNum=fcnNum+1;
% void openslide_get_layer0_dimensions ( openslide_t * osr , int64_t * w , int64_t * h ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='openslide_get_layer0_dimensions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_openslidePtr', 'int64Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
% void openslide_get_layer_dimensions ( openslide_t * osr , int32_t level , int64_t * w , int64_t * h ); 
fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='openslide_get_layer_dimensions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_openslidePtr', 'int32', 'int64Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
% double openslide_get_layer_downsample ( openslide_t * osr , int32_t level ); 
fcns.thunkname{fcnNum}='doublevoidPtrint32Thunk';fcns.name{fcnNum}='openslide_get_layer_downsample'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'s_openslidePtr', 'int32'};fcnNum=fcnNum+1;
% int32_t openslide_get_best_layer_for_downsample ( openslide_t * osr , double downsample ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='openslide_get_best_layer_for_downsample'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_openslidePtr', 'double'};fcnNum=fcnNum+1;
% const char * openslide_get_comment ( openslide_t * osr ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='openslide_get_comment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'s_openslidePtr'};fcnNum=fcnNum+1;
structs.s_openslide.members=struct('');
methodinfo=fcns;